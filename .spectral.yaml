formats:
  - oas2
  - oas3
extends:
  - 'spectral:oas'

rules:

# These rules will be helping the OpenAPI people write be better quality, but 
# have no thoughts on the actual contents of the API.

# TODO

# example xor examples, cant have both

# no new lines in response descriptions... \n

# You have 100 properties in this model, maybe split this model down (resolved?)

  # Keep summary short and sweet
  operation-short-summary: 
    description: "Operation summary should be short and sweet, no full stops, and less than 20 characters"
    recommended: true
    type: "style"
    given: "$.paths.*[?( @property === 'get' || @property === 'put' || @property === 'post' || @property === 'delete' || @property === 'options' || @property === 'head' || @property === 'patch' || @property === 'trace' )]"
    then:
      - field: summary
        function: pattern
        functionOptions:
          notMatch: "\\."
      - field: summary
        function: length
        functionOptions:
          max: 20

  # A common convention for schema names is PascalCase
  schema-names-pascal-case:
    description: Schema names MUST be written in PascalCase
    message: '{{property}} is not PascalCase: {{error}}'
    recommended: true
    type: style
    given: '$.components.schemas.*~'
    then:
      function: pattern
      functionOptions:
        match: '^[A-Z][a-zA-Z0-9]*$'

  # Keep operationIds (which often go in the URL) as kebab case
  operationIds-kebab-case:
    description: Operation IDs MUST be written in kebab-case
    message: '{{property}} is not kebab-case: {{error}}'
    recommended: true
    type: style
    given: "$.paths.*[?( @property === 'get' || @property === 'put' || @property === 'post' || @property === 'delete' || @property === 'options' || @property === 'head' || @property === 'patch' || @property === 'trace' )]"
    then:
      field: operationId
      function: pattern
      functionOptions:
        match: "^([a-z0-9-]+)$"

  # Don't make people guess about what your parameters are
  parameter-description:
    description: Parameters must have a description.
    recommended: true
    given: '$..properties.*'
    then:
      field: description
      function: truthy

# These rules dictate actual content of the API: headers, URL conventions, and general 
# Good Ideasâ„¢ for HTTP APIs, mainly from the books/blogs on apisyouwonthate.com

# TODO

# Make sure every post/put/delete/patch endpoint has some sort of security
# (OAuth 2, API Key, but not both)

# Numeric IDs are awful, use a UUID

# No global version in url or header 

# Correct error response format (JSO:API or RFC 7807)

# Mime type should have "; charset=utf-8"

# No path defined for /

# No "(e/E)rror" in 2xx

# If a DELETE method is successfully applied, the origin server SHOULD
#    send a 202 (Accepted) status code if the action will likely succeed
#    but has not yet been enacted, a 204 (No Content) status code if the
#    action has been enacted and no further information is to be supplied,
#    or a 200 (OK) status code if the action has been enacted and the
#    response message includes a representation describing the status.

# header-parameter-names-kebab-case': {
#    given: "$..parameters[?(@.in === 'header')]",

  paths-kebab-case:
      description: Should paths be kebab-case.
      message: '{{property}} is not kebab-case: {{error}}'
      severity: warn
      recommended: true
      given: $.paths[*]~
      then:
        function: pattern
        functionOptions:
          match: "^(\/[a-z0-9-{}]+)+$"

  no-x-headers:
    description: "Please do not use headers with X-"
    message: "Headers cannot start with X-, so please find a new name for {{property}}. More: https://tools.ietf.org/html/rfc6648"
    recommended: true
    type: style
    # TODO add encoding headers too "$..content.*.encoding.*.headers"
    given: "$..parameters.[?(@.in === 'header')].name"
    then:
      function: pattern
      functionOptions:
        notMatch: '^(x|X)-'

  # Author: Andrzej (https://github.com/jerzyn)
  oas2-hosts-https-only:
    description: "ALL requests MUST go through `https` protocol only"
    recommended: true
    severity: error
    formats: [oas2]
    type: "style"
    message: "Schemes MUST be https and no other value is allowed."
    given: $.schemes
    then:
      function: schema
      functionOptions:
        schema:
          type: array
          items:
            type: string
            enum: ["https"]
          maxItems: 1
          
  # Author: Andrzej (https://github.com/jerzyn)
  request-GET-no-body:
    description: A `GET` request MUST NOT accept a `body` parameter
    severity: error
    recommended: true
    given: $.paths..get.parameters..in
    then:
      function: pattern
      functionOptions:
        notMatch: "/^body$/"

  # Author: Andrzej (https://github.com/jerzyn)
  headers-hyphenated-pascal-case:
    description: All `HTTP` headers MUST use `Hyphenated-Pascal-Case` notation
    severity: error
    given: "$..parameters[?(@.in == 'header')].name"
    message: "'HTTP' headers MUST follow 'Hyphenated-Pascal-Case' notation"
    recommended: true
    type: style
    then: 
      function: pattern
      functionOptions:
        match: "/^([A-Z][a-z0-9]-)*([A-Z][a-z0-9])+/"

  # Author: Andrzej (https://github.com/jerzyn)
  oas3-hosts-https-only:
    description: "ALL requests MUST go through `https` protocol only"
    formats:
      - oas3
    recommended: true
    severity: error
    message: "Servers MUST be https and no other protocol is allowed."
    given: $.servers..url
    then:
      function: pattern
      functionOptions:
        match: "/^https:/"
  
  # Author: Andrzej (https://github.com/jerzyn)
  oas3-request-support-json:
    description: Every request SHOULD support `application/json` media type
    formats:
      - oas3
    recommended: true
    severity: warn
    message: "{{description}}: {{error}}"
    given: $.paths.[*].requestBody.content[?(@property.indexOf('json') === -1)]^
    then:
      function: falsy

# Very early stages of implementing a bunch of FHIR rules:
#
#   http://hl7.org/fhir/http.html#general

# "FHIR is described as a 'RESTful' specification based on common industry level
#  use of the term REST. In practice, FHIR only supports Level 2 of the REST
#  Maturity model as part of the core specification, though full Level 3
#  conformance is possible through the use of extensions. Because FHIR is a
#  standard, it relies on the standardization of resource structures and
#  interfaces. This may be considered a violation of REST principles but is key to
#  ensuring consistent interoperability across diverse systems."

  fhir-type-pascal-case:
    description: 'FHIR "types" must be PascalCase'
    message: '{{property}} is not PascalCase: {{error}}'
    severity: error
    recommended: true
    format: oas2
    given: '$.paths[*]~'
    then:
      function: pattern
      functionOptions:
        match: "^(\\/)?[A-Z][a-zA-Z0-9]*(\\/)?"

  fhir-use-ssl:
    description: FHIR preffers SSL for servers
    message: '{{property}} does not contain https'
    severity: warn
    recommended: true
    format: oas2
    given: $.schemes
    then:
      function: schema
      functionOptions:
        schema:
          type: array
          contains:
            const: https

  fhir-consume-mime-types:
    description: 'FHIR mime-type must be application/fhir+(xml|json|turtle) or application/x-www-form-urlencoded for `search` endpoints'
    severity: error
    recommended: true
    format: oas2
    given: '$..consumes.*'
    then:
      function: schema
      functionOptions:
        schema:
          type: string
          enum:
            - application/fhir+xml
            - application/fhir+json
            - application/fhir+turtle
            - application/x-www-form-urlencoded

  fhir-produces-mime-types:
    description: 'FHIR mime-type must be application/fhir+(xml|json|turtle)'
    severity: error
    recommended: true
    format: oas2
    given: '$..produces.*'
    then:
      function: schema
      functionOptions:
        schema:
          type: string
          enum:
            - application/fhir+xml
            - application/fhir+json
            - application/fhir+turtle

  fhir-spec-v4:
    description: FHIR v4.0 is the prefered version
    severity: warn
    recommended: true
    format: oas2
    given: $..headers.Accept
    then:
      function: pattern
      functionOptions:
        match: '^.*; fhirVersion=4'

# Adidas Rulesets

  adidas-paths-camelCase:
    description: All YAML/JSON paths MUST follow camelCase
    severity: warn
    recommended: true
    message: "{{property}} is not camelCase: {{error}}"
    given: $.paths[*]~
    then:
      function: pattern
      functionOptions:
        # match: "/^(\/{1}(([{]?[a-z])[A-Za-z0-9]*[}]?)*)+$/" # - more generic one, allows /asasd{asdas}sadas pattern but also not closed braces
        match: "^\/([a-z][a-zA-Z0-9]+)?(\/[a-z][a-zA-Z0-9]+|\/{[a-z][a-zA-Z0-9]+})*$" # doesn't allow /asasd{asdas}sadas pattern or not closed braces

  adidas-definitions-camelCase-alphanumeric:
    description: All YAML/JSON definitions MUST follow fields-camelCase and be ASCII alphanumeric characters or `_` or `$`.
    severity: error
    recommended: true
    message: "{{property}} MUST follow camelCase and be ASCII alphanumeric characters or `_` or `$`."
    given: $.definitions[*]~
    then:
      function: pattern
      functionOptions:
        match: "/^[a-z$_]{1}[A-Z09$_]*/"

  adidas-properties-camelCase-alphanumeric:
    description: All JSON Schema properties MUST follow fields-camelCase and be ASCII alphanumeric characters or `_` or `$`.
    severity: error
    recommended: true
    message: "{{property}} MUST follow camelCase and be ASCII alphanumeric characters or `_` or `$`."
    given: $.definitions..properties[*]~
    then:
      function: pattern
      functionOptions:
        match: "/^[a-z$_]{1}[A-Z09$_]*/"

  adidas-request-GET-no-body:
    description: "A 'GET' request MUST NOT accept a 'body` parameter"
    severity: error
    given: $.paths..get.parameters..in
    then:
      function: pattern
      functionOptions:
        notMatch: "/^body$/"

  adidas-uri-template-cannot-dash:
    description: "The 'URI' template (RFC 6570 - https://tools.ietf.org/html/rfc6570) cannot contain a '-' character"
    severity: error
    recommended: true
    message: "{{property}}: {{description}}"
    given: "$.paths[*]~"
    then:
      function: pattern
      functionOptions:
        notMatch: "/-/"

  adidas-headers-no-x-headers:
    description: "All 'HTTP' headers SHOULD NOT include 'X-' headers (https://tools.ietf.org/html/rfc6648)."
    severity: warn
    given: "$..parameters[?(@.in == 'header')].name"
    message: "HTTP headers SHOULD NOT include 'X-' prefix."
    recommended: true
    type: style
    then: 
      function: pattern
      functionOptions:
        notMatch: "/^(x|X)-/"

  adidas-headers-hyphenated-pascal-case:
    description: All `HTTP` headers MUST use `Hyphenated-Pascal-Case` notation
    severity: error
    given: "$..parameters[?(@.in == 'header')].name"
    message: "'HTTP' headers MUST follow 'Hyphenated-Pascal-Case' notation"
    recommended: true
    type: style
    then: 
      function: pattern
      functionOptions:
        match: "/^([A-Z][a-z0-9]-)*([A-Z][a-z0-9])+/"

  # ---------------------------------------------------------------------------
  # Only OAS2 rules
  # ---------------------------------------------------------------------------

  adidas-oas2-protocol-https-only:
    description: "ALL requests MUST go through `https` protocol only"
    formats:
      - oas2
    recommended: true
    severity: error
    type: "style"
    message: "Schemes MUST be https and no other value is allowed."
    given: $
    then:
      field: schemes
      function: schema
      functionOptions:
        schema:
          type: array
          items:
            type: string
            enum: ["https"]
          maxItems: 1

  adidas-oas2-request-support-json:
    description: Every request SHOULD support `application/json` media type
    formats:
      - oas2
    severity: warn
    message: "{{description}}: {{error}}"
    recommended: true
    given: "$..consumes"
    then:
      function: schema
      functionOptions:
        schema:
          type: array
          contains:
            type: string
            enum:
              - application/json

  adidas-oas2-example-exists-in-parameters:
    description: All models MUST have a valid example.
    severity: error
    recommended: true
    formats:
      - oas2
    message: "{{ property }} MUST have a valid example."
    given: "$..parameters..[?(@.in == 'body' && (@.example || @.schema.$ref))]"
    then: 
      function: truthy

  # example-exists-in-definitions:
  #   description: All models MUST have a valid example.
  #   severity: error
  #   recommended: true
  #   formats:
  #     - oas2
  #   message: "{{ property }} MUST have a valid example."
  #   given: "$..definitions..[?(!@.example || !@..$ref)]"
  #   then:
  #     function: falsy
  # "$..parameters..[?(@.in == 'body')]..[?(@property !== 'properties' && @.example && ( @.type || @.format || @.$ref ))]"

  # ---------------------------------------------------------------------------
  # Only OAS3 rules
  # ---------------------------------------------------------------------------

  adidas-oas3-request-support-json:
    description: Every request MUST support `application/json` media type
    formats:
      - oas3
    recommended: true
    severity: error
    message: "{{description}}: {{error}}"
    given: $.paths.[*].requestBody.content[?(@property.indexOf('json') === -1)]^
    then:
      function: falsy

  adidas-oas3-valid-example-in-parameters:
    description: Examples must be valid against their defined schema.
    message: "{{error}}"
    recommended: true
    formats:
      - oas3
    severity: 0
    type: validation
    given: "$..parameters..[?(@.in == 'body')]..[?(@property !== 'properties' && @.example
      && ( @.type || @.format || @.$ref ))]"
    then:
      function: schemaPath
      functionOptions:
        field: example
        schemaPath: "$"

  adidas-oas3-valid-example-in-definitions:
    description: Examples must be valid against their defined schema.
    message: "{{error}}"
    recommended: true
    formats:
      - oas3
    severity: 0
    type: validation
    given: "$..definitions..[?(@property !== 'properties' && @.example && (@.type ||
      @.format || @.$ref))]"
    then:
      function: schemaPath
      functionOptions:
        field: example
        schemaPath: "$"

  adidas-oas3-protocol-https-only: # checks how does the servers array values start
    description: "ALL requests MUST go through `https` protocol only"
    formats:
      - oas3
    recommended: true
    severity: error
    message: "Servers MUST be https and no other protocol is allowed."
    given: $.servers..url
    then:
      function: pattern
      functionOptions:
        match: "/^https:/"

  adidas-oas3-response-success-hal:
    description: "All success responses MUST be of media type `application/hal+json`"
    severity: error
    given: $.paths..responses[?( @property >= 200 && @property < 300 && @property != 204)].content[*]~
    recommended: true
    # type: "style"
    formats:
      - oas3
    message: "Response documents MUST be of application/hal+json media type: {{error}}"
    then:
      function: enumeration
      functionOptions:
        values:
          - application/hal+json
    

  # ---------------------------------------------------------------------------
  # Not implemented
  # ---------------------------------------------------------------------------

  # ---------------------------------------------------------------------------
  # Other rules which are redundant or not feasible
  # ---------------------------------------------------------------------------

  # fields-date-iso8601:
  #   description: Date and time MUST follow [`ISO 8601` standard](https://www.iso.org/iso-8601-date-and-time-format.html)
  #   severity: error
  # fields-language-iso639:
  #   description: Language codes MUST follow [`ISO 639` standard](https://www.iso.org/iso-639-language-codes.html)
  #   severity: error
  # fields-country-iso3166:
  #   description: Country codes MUST follow [`ISO 3166 alpha-2` standard](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)
  #   severity: error
  # fields-currency-iso4217:
  #   description: Currency codes MUST follow [`ISO 4217` standard](https://en.wikipedia.org/wiki/ISO_4217)
  #   severity: error
  # response-303-async-link-header:
  #   description: A successful and finished async api request returns `303` response code and sends the target resource location in the `Link` header
  #   severity: hint